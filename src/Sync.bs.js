// Generated by BUCKLESCRIPT VERSION 5.0.1, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Js_json from "bs-platform/lib/es6/js_json.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_format from "bs-platform/lib/es6/caml_format.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";

function fetchImageUrl(cityName, callback) {
  var url = "https://pixabay.com/api/?q=" + (cityName + "&key=12165377-9c5309179e73242f5948443c3");
  fetch(url).then((function (prim) {
            return prim.json();
          })).then((function (json) {
          var match = Js_json.decodeObject(json);
          var tmp;
          if (match !== undefined) {
            var match$1 = Js_dict.get(Caml_option.valFromOption(match), "hits");
            if (match$1 !== undefined) {
              var match$2 = Js_json.decodeArray(Caml_option.valFromOption(match$1));
              tmp = match$2 !== undefined ? Belt_Option.flatMap(Belt_Array.get(match$2, 0), (function (img) {
                        var match = Js_json.decodeObject(img);
                        if (match !== undefined) {
                          var match$1 = Js_dict.get(Caml_option.valFromOption(match), "largeImageURL");
                          if (match$1 !== undefined) {
                            var match$2 = Js_json.decodeString(Caml_option.valFromOption(match$1));
                            if (match$2 !== undefined) {
                              return match$2;
                            } else {
                              return undefined;
                            }
                          } else {
                            return undefined;
                          }
                        }
                        
                      })) : undefined;
            } else {
              tmp = undefined;
            }
          } else {
            tmp = undefined;
          }
          Curry._1(callback, tmp);
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

function fetchCity(cityName, callback) {
  var url = "https://nominatim.openstreetmap.org/search?city=" + (cityName + "&format=json&extratags=1&addressdetails=1&accept-language=en");
  fetch(url).then((function (prim) {
            return prim.json();
          })).then((function (json) {
          fetchImageUrl(cityName, (function (imageUrl) {
                  var match = Js_json.decodeArray(json);
                  return Curry._1(callback, match !== undefined ? Belt_Option.flatMap(Belt_Array.get(match, 0), (function (city) {
                                      var match = Js_json.decodeObject(city);
                                      if (match !== undefined) {
                                        var city$1 = Caml_option.valFromOption(match);
                                        return Belt_Option.flatMap(Js_dict.get(city$1, "address"), (function (address) {
                                                      var match = Js_json.decodeObject(address);
                                                      if (match !== undefined) {
                                                        var address$1 = Caml_option.valFromOption(match);
                                                        var match$1 = Js_dict.get(city$1, "place_id");
                                                        var match$2 = Js_dict.get(address$1, "city");
                                                        var match$3 = Js_dict.get(address$1, "country");
                                                        var match$4 = Js_dict.get(city$1, "lat");
                                                        var match$5 = Js_dict.get(city$1, "lon");
                                                        if (match$1 !== undefined && match$2 !== undefined && match$3 !== undefined && match$4 !== undefined && match$5 !== undefined) {
                                                          var match$6 = Js_json.decodeNumber(Caml_option.valFromOption(match$1));
                                                          var match$7 = Js_json.decodeString(Caml_option.valFromOption(match$3));
                                                          var match$8 = Js_json.decodeString(Caml_option.valFromOption(match$2));
                                                          var match$9 = Js_json.decodeString(Caml_option.valFromOption(match$4));
                                                          var match$10 = Js_json.decodeString(Caml_option.valFromOption(match$5));
                                                          if (match$6 !== undefined && match$7 !== undefined && match$8 !== undefined && match$9 !== undefined && match$10 !== undefined) {
                                                            return /* record */[
                                                                    /* id */match$6.toString(),
                                                                    /* name */match$8,
                                                                    /* country */match$7,
                                                                    /* coordinates : record */[
                                                                      /* lat */Caml_format.caml_float_of_string(match$9),
                                                                      /* lng */Caml_format.caml_float_of_string(match$10)
                                                                    ],
                                                                    /* image : record */[
                                                                      /* url */imageUrl,
                                                                      /* attribution */"",
                                                                      /* attributionUrl */undefined
                                                                    ]
                                                                  ];
                                                          } else {
                                                            return undefined;
                                                          }
                                                        } else {
                                                          return undefined;
                                                        }
                                                      }
                                                      
                                                    }));
                                      }
                                      
                                    })) : undefined);
                }));
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

export {
  fetchImageUrl ,
  fetchCity ,
  
}
/* No side effect */
