// Generated by BUCKLESCRIPT VERSION 5.0.1, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Belt_List from "bs-platform/lib/es6/belt_List.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Belt_SortArray from "bs-platform/lib/es6/belt_SortArray.js";
import * as Caml_primitive from "bs-platform/lib/es6/caml_primitive.js";
import * as ReasonReactRouter from "reason-react/src/ReasonReactRouter.js";
import * as Sync$ReactTemplate from "./Sync.bs.js";
import * as Layout$ReactTemplate from "./Layout.bs.js";
import * as CityMap$ReactTemplate from "./CityMap.bs.js";
import * as CityList$ReactTemplate from "./CityList.bs.js";

function App(Props) {
  var url = ReasonReactRouter.useUrl(undefined, /* () */0);
  var selected = decodeURIComponent(Belt_Option.getWithDefault(Belt_List.get(url[/* path */0], 0), "Vienna"));
  var tmp;
  try {
    tmp = Belt_Option.getWithDefault(Belt_Option.map(Caml_option.null_to_opt(localStorage.getItem("result")), (function (item) {
                return JSON.parse(item);
              })), /* record */[/* cities */undefined]);
  }
  catch (exn){
    tmp = /* record */[/* cities */undefined];
  }
  var match = React.useReducer((function (state, action) {
          var redirect = /* record */[/* contents */false];
          var result;
          if (action.tag) {
            var city = action[0];
            redirect[0] = city[/* name */1] === selected;
            result = /* record */[/* cities */Belt_Array.keep(Belt_Option.getWithDefault(state[/* cities */0], /* array */[]), (function (c) {
                      return c[/* name */1] !== city[/* name */1];
                    }))];
          } else {
            result = /* record */[/* cities */Belt_Array.concat(Belt_Option.getWithDefault(state[/* cities */0], /* array */[]), /* array */[action[0]])];
          }
          var result$1 = /* record */[/* cities */Belt_Option.map(result[/* cities */0], (function (cities) {
                    return Belt_SortArray.stableSortBy(cities, (function (c1, c2) {
                                  return Caml_primitive.caml_string_compare(c1[/* name */1], c2[/* name */1]);
                                }));
                  }))];
          localStorage.setItem("result", Belt_Option.getWithDefault(Caml_option.undefined_to_opt(JSON.stringify(result$1)), ""));
          setTimeout((function (param) {
                  if (redirect[0]) {
                    return ReasonReactRouter.push("/");
                  } else {
                    return 0;
                  }
                }), 1);
          return result$1;
        }), tmp);
  var dispatch = match[1];
  var state = match[0];
  var cityCallback = function (c) {
    return Curry._1(dispatch, /* Add */Block.__(0, [c]));
  };
  var hasCity = Belt_Array.keep(Belt_Option.getWithDefault(state[/* cities */0], /* array */[]), (function (c) {
          return c[/* name */1] === selected;
        })).length !== 0;
  React.useEffect((function () {
          if (!hasCity && selected !== "") {
            Sync$ReactTemplate.fetchCity(selected, (function (maybeCity) {
                    if (maybeCity !== undefined) {
                      return Curry._1(dispatch, /* Add */Block.__(0, [maybeCity]));
                    } else {
                      return /* () */0;
                    }
                  }));
          }
          return undefined;
        }), /* array */[undefined]);
  return React.createElement(Layout$ReactTemplate.make, {
              children: React.createElement(CityMap$ReactTemplate.make, {
                    cities: state[/* cities */0],
                    selected: selected
                  }),
              menu: React.createElement(CityList$ReactTemplate.make, {
                    cities: state[/* cities */0],
                    selected: selected,
                    removeCity: (function (city) {
                        return Curry._1(dispatch, /* Remove */Block.__(1, [city]));
                      })
                  }),
              cityCallback: cityCallback
            });
}

var make = App;

export {
  make ,
  
}
/* react Not a pure module */
